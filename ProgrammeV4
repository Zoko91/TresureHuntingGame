using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChasseAuTresor
{
    class Program
    {
        static void Main(string[] args)
        {
            string[,] grille = Initialiser();
            int[,] vide = Initialiser2(grille);
            int compteurTours = 0;
            int ligne;
            int colonne;
            /*demander position du premier coup
             * appeler fonctions placement d'items
             * jouer le premier coup
             * appeler la fonction jouer */
            Console.WriteLine();

            Console.Write("Choisissez le numéro de ligne : ");
            ligne = int.Parse(Console.ReadLine()) - 1;

            Console.Write("Choisissez le numéro de colonne : ");
            colonne = int.Parse(Console.ReadLine()) - 1;

            int[,] positionsMines = PlacerMines(ligne, colonne, grille);
            int[,] positionsTresors = PlacerTresors(ligne, colonne, grille, positionsMines);
            Jouer(grille, positionsMines, positionsTresors, ref compteurTours, ligne, colonne, vide);


            Console.ReadLine();
        }

        //Sous programmes --------------------------------------------------------------------------------------

        static string[,] Initialiser()
        /* Demande taille du plateau au joueur 
         * et crée le tableau*/
        {
            Console.WriteLine("Veuillez indiquez les dimensions de la grille\nCombien de lignes voulez vous?: ");
            int lignesGrille = int.Parse(Console.ReadLine());

            Console.WriteLine("Combien de colonnes voulez vous?: ");
            int colonnesGrille = int.Parse(Console.ReadLine());

            string[,] grille = new string[lignesGrille, colonnesGrille];

            for (int i = 0; i < grille.GetLength(0); i++)
            {
                for (int j = 0; j < grille.GetLength(1); j++)
                {
                    grille[i, j] = " ND ";
                }
            }
            Console.WriteLine();
            AfficherGrille(grille); // demande affichage de la grille
            return grille;
        }
        static int[,] Initialiser2(string[,] grille)
        /* Demande taille du plateau au joueur 
         * et crée le tableau*/
        {


            int[,] vide = new int[grille.GetLength(0), grille.GetLength(1)];

            for (int i = 0; i < vide.GetLength(0); i++)
            {
                for (int j = 0; j < vide.GetLength(1); j++)
                {
                    vide[i, j] = 0;
                }
            }
 // demande affichage de la grille
            return vide;
        }

        static void AfficherGrille(string[,] tab)
        //Affiche la grille de jeu
        {
            for (int i = 0; i < tab.GetLength(0); i++)
            {
                Console.Write($"{i + 1} |");
                for (int j = 0; j < tab.GetLength(1); j++)
                {
                    //Console.Write(" ");
                    //Console.BackgroundColor = ConsoleColor.White;
                    Console.Write(tab[i, j]);
                    //Console.BackgroundColor = ConsoleColor.Black;
                    //Console.Write(" ");
                }
                Console.WriteLine();
                Console.WriteLine();
            }

        }
        static void AfficherGrille2(int[,] tab)
        //Affiche la grille de jeu
        {
            for (int i = 0; i < tab.GetLength(0); i++)
            {
                for (int j = 0; j < tab.GetLength(1); j++)
                {
                    //Console.Write(" ");
                    //Console.BackgroundColor = ConsoleColor.White;
                    Console.Write(tab[i, j]);
                    //Console.BackgroundColor = ConsoleColor.Black;
                    //Console.Write(" ");
                }
                Console.WriteLine();
                Console.WriteLine();
            }

        }

        // =================================================
        static int[,] PlacerMines(int ligne, int colonne, string[,] grille)
        // Place les mines 
        {
            bool test = false;
            Random rng = new Random();
            //int nbMines = rng.Next(grille.GetLength(0) / 2, grille.GetLength(0) * grille.GetLength(1) / 2 + 1); // + 1 car on veut la moitié pile du tableau et pas la moitié - 1
            int nbMines  =  5;
            int[,] positionsMines = new int[nbMines, 2];
            /* matrice des positions des mines 
             * |x,y| 1ere mine
             * | , | 2ème mine etc*/

            int indice = 0;
            for (int i = 0; i < positionsMines.GetLength(0); i++)
            {
                //créer les coordonnées d'UNE MINE
                indice = i;
                int x = rng.Next(0, grille.GetLength(0));
                int y = rng.Next(0, grille.GetLength(1));
                for (int j = indice; j >= 0; j--)
                {
                    while (((positionsMines[j, 0] == x) && (positionsMines[j, 1] == y)) || ((x == ligne) && (y == colonne)))
                    {
                        x = rng.Next(0, grille.GetLength(0));
                        y = rng.Next(0, grille.GetLength(1));
                    }


                    /* while (test != true)
                     {
                         x = rng.Next(0, grille.GetLength(0));
                         y = rng.Next(0, grille.GetLength(1));
                         if ((positionsMines[j, 0] != x) && (positionsMines[j, 1] != y))
                         {
                             if ((x != ligne) && (y != colonne))
                             {
                                 test = true;
                             }
                         }
                         // Fin de la création de coordonnées

                         // Début positionnement

                     }*/
                    positionsMines[i, 0] = x; // coordonnées x des mines
                    positionsMines[i, 1] = y; // coordonnées y des mines


                }

            }
            return positionsMines;
        }

        static int[,] PlacerTresors(int ligne, int colonne, string[,] grille, int[,] positionsMines)
        // Place les trésors
        {
            bool test = false;
            Random rng = new Random();
            int nbTresors = rng.Next(1, 4); // Entre 1 et 3 trésors
            int[,] positionsTresors = new int[nbTresors, 2];
            /* matrice des positions des trésors 
             * |x,y| 1er trésor
             * | , | 2ème trésor etc*/

            int indice = 0;
            for (int i = 0; i < positionsTresors.GetLength(0); i++)
            {
                //créer les coordonnées d'UN TRESOR
                indice = i;
                int x = rng.Next(0, grille.GetLength(0));
                int y = rng.Next(0, grille.GetLength(1));

                for (int j = indice; j >= 0; j--)
                {
                    /*while ((positionsTresors[j, 0] == x && positionsTresors[j, 1] == y || CheckerPositions(x, y, positionsMines)) || (positionsTresors[j, 0] == ligne && positionsTresors[j, 1] == colonne)) // vérification qu'il n'y ait pas non plus de mine à cet endroit 
                    {
                        x = rng.Next(0, grille.GetLength(0));
                        y = rng.Next(0, grille.GetLength(1));
                    }*/
                    while (test != true)
                    {
                        x = rng.Next(0, grille.GetLength(0));
                        y = rng.Next(0, grille.GetLength(1));

                        if ((positionsTresors[j, 0] != x && positionsTresors[j, 1] != y))
                        {
                            if (CheckerPositions(x, y, positionsMines) == false)
                            {

                                if ((x != ligne) && (y != colonne))
                                {
                                    test = true;
                                }

                            }
                        }
                    }
                }

                // Fin de la création de coordonnées
                // Début positionnement
                positionsTresors[i, 0] = x; // coordonnées x des trésors
                positionsTresors[i, 1] = y; // coordonnées y des trésors
            }
            return positionsTresors;
        }
        // =================================================
        static void Jouer(string[,] grille, int[,] positionsMines, int[,] positionsTresors, ref int compteurTours, int ligne, int colonne,int[,] vide)
        // Demande au joueur de jouer un coup et le joue
        { // Penser à faire ligne -1 et colonne -1 pour la position du coup.


            compteurTours += 1;

            bool lost = false;
            bool win = EstGagnee(positionsMines, grille);
            if (win == false)
            {
                lost = EstPerdue(ligne, colonne, grille, positionsMines);
                if (lost == true)
                {
                    Console.WriteLine(" BOUMMM  \nTu es mort !!!");// Si on a le temps récapitulaif de partie : nb de coups et nb de trésors gagnés
                }
                // else {Jouer(grille, positionsMines); }
            }
            else
            {
                Console.WriteLine("  HOURRA  ! Tu as gagné petit pirate ! ");
            }


            //Instruction du jeu
            //penser a rajouter checkentourage + modifier les chiffres dès qu'il trouve un trésor

            RecursiviteV2(grille, positionsMines, positionsTresors, ref compteurTours, ligne, colonne, vide);


            AfficherGrille(grille);

            //AFFICHAGE MINES ET TRESORS
            Console.WriteLine("mines :");
            AfficherGrille2(positionsMines);
            Console.WriteLine("tresors :");
            AfficherGrille2(positionsTresors);


            if (win == false && lost == false)
            {
                Console.WriteLine("Jouer un nouveau coup : ");
                Console.Write("Choisissez une ligne : ");
                ligne = int.Parse(Console.ReadLine()) - 1;
                Console.Write("Choisissez une colonne : ");
                colonne = int.Parse(Console.ReadLine()) - 1;
                Jouer(grille, positionsMines, positionsTresors, ref compteurTours, ligne, colonne,vide);
            }




        }
        static void RecursiviteV2(string[,] grille, int[,] positionsMines, int[,] positionsTresors, ref int compteurTours, int ligne, int colonne, int[,] vide)
        {
            if(vide[ligne,colonne] != 0) //case decouverte
            {
                
            }
            else //case non decouverte
            {
                vide[ligne,  colonne] = 1;
                if (CheckerEntourage(ligne, colonne, positionsMines, positionsTresors, grille) == 0)
                {
                    //Console.WriteLine(grille[ligne, colonne]);

                    int indiceLigneDep = ligne - 1;
                    int indiceLigneFin = ligne + 1;
                    int indiceColonneDep = colonne - 1;
                    int indiceColonneFin = colonne + 1;
                    if (ligne == 0)
                    {
                        indiceLigneDep += 1;
                    }
                    else
                    {
                        if (ligne == grille.GetLength(0) - 1)
                        {
                            indiceLigneFin -= 1;
                        }
                    }
                    if (colonne == 0)
                    {
                        indiceColonneDep += 1;
                    }
                    else
                    {
                        if (colonne == grille.GetLength(1) - 1)
                        {
                            indiceColonneFin -= 1;
                        }
                    }



                    for (int i = indiceLigneDep; i <= indiceLigneFin; i++)
                    {
                        for (int j = indiceColonneDep; j <= indiceColonneFin; j++)
                        {
                            if (CheckerEntourage(i, j, positionsMines, positionsTresors, grille) == 0)
                            {
                               /*
                                Console.WriteLine(" ****** ");

                                Console.WriteLine("i : " +  i);
                                Console.WriteLine("j : " + j);
                                Console.WriteLine("vide[i,j] : " + vide[i,j]);
                                Console.WriteLine(" ****** ");
                                AfficherGrille(grille);
                                Console.WriteLine();*/

                                grille[i, j] = "    ";//vider la case si elle est vide
                                //vide[i,  j] = 1;
                                if (ligne == 0 && colonne == 0)
                                // if ((i!=grille.GetLength(0)-1 && j!= grille.GetLength(1)-1) && (i !=0 && j != 0))
                                {
                                    //Recursivite(grille, positionsMines, positionsTresors, ref compteurTours, 0, 1);
                                }
                                else {RecursiviteV2(grille, positionsMines, positionsTresors, ref compteurTours, i, j,vide); }
                            }
                            else
                            {
                                int compteur = (CheckerEntourage(i, j, positionsMines, positionsTresors, grille));
                                //Console.WriteLine(compteur);
                                //Console.WriteLine(grille[i, j]);
                                grille[i, j] = " " + compteur + " ";
                                vide[i, j] = 1;
                            }
                        }
                    }
                    grille[ligne, colonne] = "    ";
                    vide[ligne,  colonne] = 1;
                    
                }
                else
                {
                    grille[ligne, colonne] = " " + CheckerEntourage(ligne, colonne, positionsMines, positionsTresors, grille) + " ";
                    vide[ligne, colonne] = 1;
                }
                Console.WriteLine();
            }
        }

        
        static void Recursivite(string[,] grille, int[,] positionsMines, int[,] positionsTresors, ref int compteurTours, int ligne, int colonne)
        {
      
            if (CheckerEntourage(ligne, colonne, positionsMines, positionsTresors, grille) == 0 )
            {
               //Console.WriteLine(grille[ligne, colonne]);

                int indiceLigneDep = ligne - 1;
                int indiceLigneFin = ligne + 1;
                int indiceColonneDep = colonne - 1;
                int indiceColonneFin = colonne + 1;
                if (ligne == 0)
                {
                    indiceLigneDep += 1;
                }
                else
                {
                    if (ligne == grille.GetLength(0) - 1)
                    {
                        indiceLigneFin -= 1;
                    }
                }
                if (colonne == 0)
                {
                    indiceColonneDep += 1;
                }
                else
                {
                    if (colonne == grille.GetLength(1) - 1)
                    {
                        indiceColonneFin -= 1;
                    }
                }



                for (int i = indiceLigneDep; i <= indiceLigneFin; i++)
                {
                    for (int j = indiceColonneDep; j <= indiceColonneFin; j++)
                    {
                        if (CheckerEntourage(i, j, positionsMines, positionsTresors, grille) == 0)
                        {
                            
                            AfficherGrille(grille);
                            Console.WriteLine();
                            grille[i, j] = "    ";//vider la case si elle est vide
                            if (ligne==0 && colonne ==0)
                           // if ((i!=grille.GetLength(0)-1 && j!= grille.GetLength(1)-1) && (i !=0 && j != 0))
                            {
                                //Recursivite(grille, positionsMines, positionsTresors, ref compteurTours, 0, 1);
                            }
                            else { Recursivite(grille, positionsMines, positionsTresors, ref compteurTours, i, j); }
                           
                        }
                        else
                        {
                            int compteur = (CheckerEntourage(i, j, positionsMines, positionsTresors, grille));
                            //Console.WriteLine(compteur);
                            //Console.WriteLine(grille[i, j]);
                            grille[i, j] = " " + compteur + " ";
                        }
                    }
                }
                grille[ligne, colonne] = "    ";
            }
            else
            {
                grille[ligne, colonne] = " " + CheckerEntourage(ligne, colonne, positionsMines, positionsTresors, grille) + " ";
            }
            Console.WriteLine();
        }
        static bool EstPerdue(int ligne, int colonne, string[,] grille, int[,] positionsMines)
        // Détecte si le joueur a touché une mine et arrête la partie ou continue la partie sinon
        {
            bool lost = false;
            for (int i = 0; i < positionsMines.GetLength(0); i++)
            {
                if (positionsMines[i, 0] == ligne && positionsMines[i, 1] == colonne)
                {
                    lost = true;
                    //Console.WriteLine("💣 BOUMMM 💣 \nTu es mort ☠ !!!"); // Si on a le temps récapitulaif de partie : nb de coups et nb de trésors gagnés
                }
                //else { Jouer(ligne, colonne, grille, positionsMines); }
            }
            return lost;
        }

        static bool EstGagnee(int[,] positionsMines, string[,] grille)
        // Détecte si le joueur a gagné et arrête la partie
        {
            bool win = false;
            for (int i = 0; i < grille.GetLength(0); i++)
            {
                for (int j = 0; j < grille.GetLength(1); j++)
                {
                    if (grille[i, j] == " ND " && CheckerPositions(i, j, positionsMines) == false)
                    {
                        return win;
                    }
                }
            }
            win = true;
            return win;
        }
        static bool CheckerPositions(int i, int j, int[,] positionsItems)
        // renvoie true si la position vérifiée est une mine ou un trésor, false sinon
        {
            bool reponse = false;
            for (int indice = 0; indice < positionsItems.GetLength(0); indice++)
            {
                if (positionsItems[indice, 0] == i && positionsItems[indice, 1] == j)
                {
                    reponse = true;
                    return reponse;
                }
            }
            return reponse;
        }


        static int CheckerEntourage(int ligne, int colonne, int[,] positionsMines, int[,] positionsTresors, string[,] grille)
        // affiche le nombre associé à la case
        {
            int indiceLigneDep = ligne - 1;
            int indiceLigneFin = ligne + 1;
            int indiceColonneDep = colonne - 1;
            int indiceColonneFin = colonne + 1;
            int compteur = 0;
            if (ligne == 0)
            {
                indiceLigneDep += 1;
            }
            if (colonne == 0)
            {
                indiceColonneDep += 1;
            }
            if (ligne == grille.GetLength(0) - 1)
            {
                indiceLigneFin -= 1;
            }
            if (colonne == grille.GetLength(1) - 1)
            {
                indiceColonneFin -= 1;
            }
            for (int i = indiceLigneDep; i <= indiceLigneFin; i++)
            {
                for (int j = indiceColonneDep; j <= indiceColonneFin; j++)
                {
                    //Console.WriteLine("b");
                    if (CheckerPositions(i, j, positionsMines))
                    {
                        //Console.WriteLine("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAh");
                        compteur += 1;
                    }
                    if (CheckerPositions(i, j, positionsTresors))
                    {
                        //Console.WriteLine("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBh");
                        compteur += 2;
                    }
                }
            }
            return compteur;
        }

    }
}
