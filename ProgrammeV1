namespace ChasseAuTresor
{
    class Program
    {
        static void Main(string[] args)
        {
            string[,] grille = Initialiser();

            /*demander position du premier coup
             * appeler fonctions placement d'items
             * appeler fonction coup */
            Console.WriteLine();

            Console.Write("Choisissez le num√©ro de ligne : ");
            int ligne = int.Parse(Console.ReadLine());
            
            Console.Write("Choisissez le num√©ro de colonne : ");
            int colonne = int.Parse(Console.ReadLine());

            int[,] positionsMines = PlacerMines(grille);
            int[,] positionsTresors = PlacerTresors(grille, positionsMines);
            

            Console.ReadLine();
        }

        //Sous programmes --------------------------------------------------------------------------------------

        static string[,] Initialiser()
        /* Demande taille du plateau au joueur 
         * et cr√©e le tableau*/
        {
            Console.WriteLine("Veuillez indiquez les dimensions de la grille\nCombien de lignes voulez vous?: ");
            int lignesGrille = int.Parse(Console.ReadLine());

            Console.WriteLine("Combien de colonnes voulez vous?: ");
            int colonnesGrille = int.Parse(Console.ReadLine());

            string[,] grille = new string[lignesGrille, colonnesGrille];
            for (int i = 0; i < grille.GetLength(0); i++)
            {
                for (int j = 0; j < grille.GetLength(1); j++)
                {
                    grille[i, j] = " ND ";
                }
            }
            Console.WriteLine();
            AfficherGrille(grille); // demande affichage de la grille
            return grille;
        }

        static void AfficherGrille(string[,] tab)
        //Affiche la grille de jeu
        {
            for (int i = 0; i < tab.GetLength(0); i++)
            {
                for (int j = 0; j < tab.GetLength(1); j++)
                {
                    Console.Write(tab[i, j]);
                }
                Console.WriteLine();
            }

        }

        // =================================================
        static int[,] PlacerMines(string[,] grille)
        // Place les mines 
        {
            Random rng = new Random();
            int nbMines = rng.Next(grille.GetLength(0) / 2, grille.GetLength(0) * grille.GetLength(1) / 2 + 1); // + 1 car on veut la moiti√© pile du tableau et pas la moiti√© - 1
            int[,] positionsMines = new int[nbMines, 2];
            /* matrice des positions des mines 
             * |x,y| 1ere mine
             * | , | 2√®me mine etc*/

            int indice = 0;
            for (int i = 0; i < positionsMines.GetLength(0); i++)
            {
                //cr√©er les coordonn√©es d'UNE MINE
                indice = i;
                int x = rng.Next(0, grille.GetLength(0) + 1);
                int y = rng.Next(0, grille.GetLength(1) + 1);
                for (int j = indice; j >= 0; j--)
                {
                    while (positionsMines[j, 0] == x && positionsMines[j, 1] == y)
                    {
                        x = rng.Next(0, grille.GetLength(0) + 1);
                        y = rng.Next(0, grille.GetLength(1) + 1);
                    }
                }
                // Fin de la cr√©ation de coordonn√©es

                // D√©but positionnement
                positionsMines[i, 0] = rng.Next(0, grille.GetLength(0) + 1); // coordonn√©es x des mines
                positionsMines[i, 1] = rng.Next(0, grille.GetLength(1) + 1); // coordonn√©es y des mines
            }
            return positionsMines;
        }
        static int[,] PlacerTresors(string[,] grille, int[,] positionsMines)
        // Place les tr√©sors
        {
            Random rng = new Random();
            int nbTresors = rng.Next(1, 4); // Entre 1 et 3 tr√©sors
            int[,] positionsTresors = new int[nbTresors, 2];
            /* matrice des positions des tr√©sors 
             * |x,y| 1er tr√©sor
             * | , | 2√®me tr√©sor etc*/

            int indice = 0;
            for (int i = 0; i < positionsTresors.GetLength(0); i++)
            {
                //cr√©er les coordonn√©es d'UN TRESOR
                indice = i;
                int x = rng.Next(0, grille.GetLength(0) + 1);
                int y = rng.Next(0, grille.GetLength(1) + 1);

                for (int j = indice; j >= 0; j--)
                {
                    while (positionsTresors[j, 0] == x && positionsTresors[j, 1] == y && CheckerPositions(x,y,positionsMines)) // v√©rification qu'il n'y ait pas non plus de mine √† cet endroit
                    {
                        x = rng.Next(0, grille.GetLength(0) + 1);
                        y = rng.Next(0, grille.GetLength(1) + 1);
                    }
                }
                // Fin de la cr√©ation de coordonn√©es

                // D√©but positionnement
                positionsTresors[i, 0] = rng.Next(0, grille.GetLength(0) + 1); // coordonn√©es x des tr√©sors
                positionsTresors[i, 1] = rng.Next(0, grille.GetLength(1) + 1); // coordonn√©es y des tr√©sors
            }
            return positionsTresors;
        }
        // =================================================
        static void Jouer(int ligne, int colonne, string[,] grille, int[,] positionsMines)
        // Demande au joueur de jouer un coup et le joue
        { // Penser √† faire ligne -1 et colonne -1 pour la position du coup.





            bool win = EstGagnee(positionsMines, grille);
            if (win == false)
            {
                EstPerdue(ligne, colonne, grille, positionsMines);
            }


        }
        static void EstPerdue(int ligne, int colonne, string[,] grille, int[,] positionsMines)
        // D√©tecte si le joueur a touch√© une mine et arr√™te la partie ou continue la partie sinon
        {
            for (int i = 0; i < positionsMines.GetLength(0); i++)
            {
                if (positionsMines[i, 0] == ligne && positionsMines[i, 1] == colonne)
                {
                    Console.WriteLine("üí£ BOUMMM üí£ \nTu es mort ‚ò† !!!"); // Si on a le temps r√©capitulaif de partie : nb de coups et nb de tr√©sors gagn√©s
                }
                else { Jouer(grille); }
            }
        }

        static bool EstGagnee( int[,] positionsMines, string[,] grille)
        // D√©tecte si le joueur a gagn√© et arr√™te la partie
        {
            bool win = false;
            for (int i = 0; i < grille.GetLength(0); i++)
            {
                for (int j = 0; j < grille.GetLength(1); j++)
                {
                    if (grille[i, j] == " ND " && CheckerPositions(i, j, positionsMines) == false)
                    {
                        return win;
                    }
                }
            }
            win = true;
            return win;
        }
        static bool CheckerPositions(int i, int j, int[,] positionsItems)
        // renvoie true si la position v√©rifi√©e est une mine ou un tr√©sor, false sinon
        {
            bool reponse = false;
            for (int indice = 0; indice < positionsItems.GetLength(0); indice++)
            {
                if (positionsItems[indice, 0] == i && positionsItems[indice, 1] == j)
                {
                    reponse = true;
                    return reponse;
                }
            }
            return reponse;
        }

    }
}
