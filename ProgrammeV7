using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ChasseAuTresor
{
    class Program
    {
        static void Main(string[] args)
        {
            string[,] grille = Initialiser(); //initialise la grille de jeu
            int[,] verification = InitialiserVerif(grille); //Initialise une grille utile à la fonction Recursivité (case déjà vérifiée)
            int compteurTours = 0;
            int ligne;
            int colonne;

            Console.WriteLine();
            Console.Write("Choisissez le numéro de ligne : ");
            ligne = int.Parse(Console.ReadLine()) - 1;
            Console.Write("Choisissez le numéro de colonne : ");
            colonne = int.Parse(Console.ReadLine()) - 1;

            int[,] positionsMines = PlacerMines(ligne, colonne, grille);    // "Placement" des Mines
            int[,] positionsTresors = PlacerTresors(ligne, colonne, grille, positionsMines);        // "Placement" des trésors
            Jouer(grille, positionsMines, positionsTresors, ref compteurTours, ligne, colonne, verification); // La chasse au trésor commence avec les coordonnées indiquées

            Console.ReadLine();
        }

        //Sous programmes --------------------------------------------------------------------------------------

        static string[,] Initialiser()
        /* Demande taille du plateau au joueur 
         * et crée le tableau de jeu*/
        {
            Console.WriteLine("Veuillez indiquez les dimensions de la grille\nCombien de lignes voulez vous?: ");
            int lignesGrille = int.Parse(Console.ReadLine());
            Console.WriteLine("Combien de colonnes voulez vous?: ");
            int colonnesGrille = int.Parse(Console.ReadLine());

            string[,] grille = new string[lignesGrille, colonnesGrille];

            for (int i = 0; i < grille.GetLength(0); i++)
            {
                for (int j = 0; j < grille.GetLength(1); j++)
                {
                    grille[i, j] = " ND ";  // Contenu des cases verifications
                }
            }
            Console.WriteLine();
            AfficherGrille(grille); // demande affichage de la grille
            return grille;
        }



        static int[,] InitialiserVerif(string[,] grille)
        /* Demande taille du plateau au joueur 
         * et crée le tableau de la grille "vérification" */
        {
            int[,] verification = new int[grille.GetLength(0), grille.GetLength(1)];
            for (int i = 0; i < verification.GetLength(0); i++)
            {
                for (int j = 0; j < verification.GetLength(1); j++)
                {
                    verification[i, j] = 0;
                }
            }
            return verification;
        }



        static void AfficherGrille(string[,] tab)
        //Affiche la grille de jeu
        {
            for (int i = 0; i < tab.GetLength(0); i++)
            {

                if (i >= 9)
                {
                    Console.Write($"{i + 1} |");
                }
                else { Console.Write($"{i + 1}  |"); }

                for (int j = 0; j < tab.GetLength(1); j++)
                {
                    if (tab[i, j] == "  T ")
                    {
                        Console.Write(" ");
                        Console.BackgroundColor = ConsoleColor.DarkGreen;
                    }
                    else
                    {
                        if (tab[i, j] == "  M ")
                        {
                            Console.Write(" ");
                            Console.BackgroundColor = ConsoleColor.DarkRed;
                        }
                        else
                        {
                            if (tab[i, j] == "    ")
                            {
                                Console.Write(" ");
                                Console.BackgroundColor = ConsoleColor.DarkGray;
                            }
                            else
                            {
                                if (tab[i, j] == " ND ")
                                {
                                    Console.Write(" ");
                                    Console.BackgroundColor = ConsoleColor.White;
                                    Console.ForegroundColor = ConsoleColor.Black;
                                }
                                else
                                {
                                    if (tab[i, j] == " 1  ")
                                    {
                                        Console.Write(" ");
                                        Console.BackgroundColor = ConsoleColor.DarkGray;
                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                    }
                                    else
                                    {
                                        if (tab[i, j] == " 2  ")
                                        {
                                            Console.Write(" ");
                                            Console.BackgroundColor = ConsoleColor.DarkGray;
                                            Console.ForegroundColor = ConsoleColor.Green;
                                        }
                                        else
                                        {
                                            Console.Write(" ");
                                            Console.BackgroundColor = ConsoleColor.DarkGray;
                                            Console.ForegroundColor = ConsoleColor.DarkRed;
                                        }
                                    } 
                                    
                                }
                            }
                        }
                    }
                    Console.Write(tab[i, j]);
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.BackgroundColor = ConsoleColor.Black;
                    Console.Write(" ");
                }
                Console.WriteLine();
                Console.WriteLine();
            }

        }


        // =================================================
        static int[,] PlacerMines(int ligne, int colonne, string[,] grille)
        // Place les mines 
        {
            Random rng = new Random();
            //int nbMines = rng.Next(grille.GetLength(0) / 2, grille.GetLength(0) * grille.GetLength(1) / 2 + 1); // + 1 car on veut la moitié pile du tableau et pas la moitié - 1
            int nbMines = 2;
            int[,] positionsMines = new int[nbMines, 2];
            /* matrice des positions des mines 
             * |x1,y1| 1ere mine
             * |x2,y2| 2ème mine etc*/

            int indice = 0;
            for (int i = 0; i < positionsMines.GetLength(0); i++)
            {
                //créer les coordonnées d'UNE MINE
                indice = i;
                int x = rng.Next(0, grille.GetLength(0));
                int y = rng.Next(0, grille.GetLength(1));
                for (int j = indice; j >= 0; j--)
                {
                    while (((positionsMines[j, 0] == x) && (positionsMines[j, 1] == y)) || ((x == ligne) && (y == colonne)))
                    {
                        x = rng.Next(0, grille.GetLength(0));
                        y = rng.Next(0, grille.GetLength(1));
                    }
                    // Fin de la création de coordonnées

                    // Début positionnement
                    positionsMines[i, 0] = x; // coordonnées x des mines
                    positionsMines[i, 1] = y; // coordonnées y des mines


                }

            }
            return positionsMines;
        }



        static int[,] PlacerTresors(int ligne, int colonne, string[,] grille, int[,] positionsMines)
        // Place les trésors
        {
            bool test = false;
            Random rng = new Random();
            int nbTresors = rng.Next(1, 4); // Entre 1 et 3 trésors
            int[,] positionsTresors = new int[nbTresors, 2];
            /* matrice des positions des trésors 
             * |x1,y1| 1er trésor
             * |x2,y2| 2ème trésor etc*/

            int indice = 0;
            for (int i = 0; i < positionsTresors.GetLength(0); i++)
            {
                //créer les coordonnées d'UN TRESOR
                indice = i;
                int x = rng.Next(0, grille.GetLength(0));
                int y = rng.Next(0, grille.GetLength(1));

                for (int j = indice; j >= 0; j--)
                {
                    while (test != true)
                    {
                        x = rng.Next(0, grille.GetLength(0));
                        y = rng.Next(0, grille.GetLength(1));

                        if ((positionsTresors[j, 0] != x && positionsTresors[j, 1] != y))
                        {
                            if (CheckerPositions(x, y, positionsMines) == false)
                            {
                                if ((x != ligne) && (y != colonne))
                                {
                                    test = true;
                                }
                            }
                        }
                    }
                }
                // Fin de la création de coordonnées
                // Début positionnement
                positionsTresors[i, 0] = x; // coordonnées x des trésors
                positionsTresors[i, 1] = y; // coordonnées y des trésors
            }
            return positionsTresors;
        }

        // =================================================

        static void Jouer(string[,] grille, int[,] positionsMines, int[,] positionsTresors, ref int compteurTours, int ligne, int colonne, int[,] verification)
        // Demande au joueur de jouer un coup et le joue
        {
            compteurTours += 1;

            bool lost = EstPerdue(ligne, colonne, grille, positionsMines);
            bool win = EstGagnee(positionsMines, grille);
            // Récupère des indicateurs de partie [Gagnée/Perdue]
            if (lost == true)
            {
                Console.WriteLine();
                Console.WriteLine(" BOUMMM  \nTu es mort !!!");// Si on a le temps récapitulaif de partie : nb de coups et nb de trésors gagnés
                // La partie est finie car la bombe a explosé 
            }
            else
            {
                if (win == true)
                {
                    Console.WriteLine();
                    Console.WriteLine("  HOURRA  ! Tu as gagné petit pirate ! ");
                    // La partie est finie car tu as récupéré tous les trésors et découvert toutes les cases ne comportant pas de mines
                }
                else
                {
                    //Instruction du jeu
                    Recursivite(grille, positionsMines, positionsTresors, ref compteurTours, ligne, colonne, verification);
                    AfficherGrille(grille);

                    //AFFICHAGE MINES ET TRESORS
                    Console.WriteLine("mines :");
                    AfficherGrilleItems(positionsMines);
                    Console.WriteLine("tresors :");
                    AfficherGrilleItems(positionsTresors);


                    if (win == false && lost == false)
                    {
                        //Relancez le jeu tant que la partie n'est pas finie
                        Console.WriteLine("Jouer un nouveau coup : ");
                        Console.Write("Choisissez une ligne : ");
                        ligne = int.Parse(Console.ReadLine()) - 1;
                        Console.Write("Choisissez une colonne : ");
                        colonne = int.Parse(Console.ReadLine()) - 1;
                        Jouer(grille, positionsMines, positionsTresors, ref compteurTours, ligne, colonne, verification);
                    }
                }
            }
        }



        static void Recursivite(string[,] grille, int[,] positionsMines, int[,] positionsTresors, ref int compteurTours, int ligne, int colonne, int[,] verification)
        {
            // Fonction récursive qui rélève les cases non indicées, sinon indique le numéro calculée sur la case
            if (verification[ligne, colonne] != 0) //case decouverte
            {

            }
            else //case non decouverte
            {
                verification[ligne, colonne] = 1;
                if (CheckerEntourage(ligne, colonne, positionsMines, positionsTresors, grille) == 0)
                {
                    //On parcourt les 8 cases autour de la case jouer récursivement
                    int indiceLigneDep = ligne - 1;
                    int indiceLigneFin = ligne + 1;
                    int indiceColonneDep = colonne - 1;
                    int indiceColonneFin = colonne + 1;
                    // Vérification des IndexOutOfRange, sur les bords
                    if (ligne == 0)
                    {
                        indiceLigneDep += 1;
                    }
                    else
                    {
                        if (ligne == grille.GetLength(0) - 1)
                        {
                            indiceLigneFin -= 1;
                        }
                    }
                    if (colonne == 0)
                    {
                        indiceColonneDep += 1;
                    }
                    else
                    {
                        if (colonne == grille.GetLength(1) - 1)
                        {
                            indiceColonneFin -= 1;
                        }
                    }

                    for (int i = indiceLigneDep; i <= indiceLigneFin; i++)
                    {
                        for (int j = indiceColonneDep; j <= indiceColonneFin; j++)
                        {
                            if (CheckerEntourage(i, j, positionsMines, positionsTresors, grille) == 0)
                            {
                                grille[i, j] = "    ";//vider la case si elle est sans chiffre
                                if (ligne == 0 && colonne == 0)
                                {
                                }
                                else { Recursivite(grille, positionsMines, positionsTresors, ref compteurTours, i, j, verification); }
                            }
                            else
                            {
                                int compteur = (CheckerEntourage(i, j, positionsMines, positionsTresors, grille));
                                grille[i, j] = " " + compteur + "  "; // Affiche le numéro calculée sur la case si il y a des trésor ou mines autour
                                verification[i, j] = 1;
                            }
                        }
                    }
                    grille[ligne, colonne] = "    ";
                    verification[ligne, colonne] = 1;

                }
                else
                {
                    // Si il y a un item autour, afficher le numéro calculée directement sur la case
                    if (CheckerPositions(ligne, colonne, positionsTresors))
                    {
                        grille[ligne, colonne] = "  T ";
                    }
                    else
                    {
                        grille[ligne, colonne] = " " + CheckerEntourage(ligne, colonne, positionsMines, positionsTresors, grille) + "  ";
                    }
                    verification[ligne, colonne] = 1;
                }
                Console.WriteLine();
            }
        }



        static bool EstPerdue(int ligne, int colonne, string[,] grille, int[,] positionsMines)
        // Détecte si le joueur a touché une mine et arrête la partie ou continue la partie sinon
        {
            //Console.Clear();
            bool lost = false;
            for (int i = 0; i < positionsMines.GetLength(0); i++)
            {
                if (positionsMines[i, 0] == ligne && positionsMines[i, 1] == colonne)
                {
                    lost = true;
                }
            }
            return lost;
        }


        // A VERIFIER, PAS SUR
        static bool EstGagnee(int[,] positionsMines, string[,] grille)
        // Détecte si le joueur a gagné et arrête la partie
        {
            bool win = false;
            for (int i = 0; i < grille.GetLength(0); i++)
            {
                for (int j = 0; j < grille.GetLength(1); j++)
                {
                    // Si toutes les cases restantes non définies sont des mines, alors la partie est gagnée
                    if (grille[i, j] == " ND " && CheckerPositions(i, j, positionsMines) == false)
                    {
                        return win;
                    }
                }
            }
            win = true;
            return win;
        }
        static bool CheckerPositions(int i, int j, int[,] positionsItems)
        // renvoie true si la position vérifiée est une mine ou un trésor, false sinon
        {
            bool reponse = false;
            for (int indice = 0; indice < positionsItems.GetLength(0); indice++)
            {
                if (positionsItems[indice, 0] == i && positionsItems[indice, 1] == j)
                {
                    reponse = true;
                    return reponse;
                }
            }
            return reponse;
        }



        static int CheckerEntourage(int ligne, int colonne, int[,] positionsMines, int[,] positionsTresors, string[,] grille)
        // affiche le nombre associé à la case
        {
            int indiceLigneDep = ligne - 1;
            int indiceLigneFin = ligne + 1;
            int indiceColonneDep = colonne - 1;
            int indiceColonneFin = colonne + 1;
            int compteur = 0;
            if (ligne == 0)
            {
                indiceLigneDep += 1;
            }
            if (colonne == 0)
            {
                indiceColonneDep += 1;
            }
            if (ligne == grille.GetLength(0) - 1)
            {
                indiceLigneFin -= 1;
            }
            if (colonne == grille.GetLength(1) - 1)
            {
                indiceColonneFin -= 1;
            }
            for (int i = indiceLigneDep; i <= indiceLigneFin; i++)
            {
                for (int j = indiceColonneDep; j <= indiceColonneFin; j++)
                {
                    if (CheckerPositions(i, j, positionsMines))
                    {
                        compteur += 1;
                    }
                    if (CheckerPositions(i, j, positionsTresors))
                    {
                        compteur += 2;
                    }
                }
            }
            return compteur;
        }

        // ================================ FONCTIONS POUR TESTS ===============================

        static void AfficherGrilleItems(int[,] tab)
        //Affiche les coordonées des items
        {
            for (int i = 0; i < tab.GetLength(0); i++)
            {
                for (int j = 0; j < tab.GetLength(1); j++)
                {
                    Console.Write(tab[i, j]);
                }
                Console.WriteLine();
                Console.WriteLine();
            }
        }
    }
}
